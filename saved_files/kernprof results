sohams-air:Fawzi_pycharm_project sohamkale$ kernprof -l -v tpe_MMAl.py
iterations: 500 temp: 1000000.0 exponent: 0.7 eif: 300.0
time taken (sec): 7.050393104553223
number of iterations: 500
og index list: [130, 163, 251, 95, 365, 36, 40, 263, 84, 408, 228, 437, 59, 43, 87, 414, 335, 346, 16, 265, 48, 147, 344, 338, 427, 206, 293, 134, 86, 166, 243, 45, 200, 131, 17, 35, 156, 454, 121, 430, 3, 307, 113, 406, 193, 444, 260, 424, 279, 358, 68, 392, 330, 58, 230, 218, 145, 28, 324, 88, 267, 20, 433, 372, 271, 396, 398, 456, 364, 459, 124, 368, 356, 101, 72, 411, 458, 328, 445, 56, 449, 123, 144, 370, 457, 416, 26, 246, 357, 129, 96, 10, 79, 225, 473, 176, 403, 2, 172, 405, 215, 348, 67, 261, 371, 472, 115, 140, 282, 249, 1, 110, 85, 435, 468, 337, 321, 227, 247, 388, 139, 213, 312, 440, 434, 404, 343, 190, 316, 142, 350, 207, 259, 182, 308, 384, 325, 167, 309, 12, 33, 450, 323, 169, 216, 288, 146, 360, 39, 304, 272, 425, 165, 374, 198, 463, 426, 284, 299, 262, 132, 443, 29, 100, 108, 89, 8, 269, 422, 65, 412, 242, 23, 407, 107, 173, 413, 391, 395, 419, 187, 268, 266, 296, 171, 439, 161, 347, 42, 238, 258, 250, 236, 5, 34, 11, 183, 219, 192, 233, 315, 31, 103, 353, 137, 184, 69, 154, 327, 336, 222, 4, 97, 80, 9, 75, 276, 359, 294, 30, 203, 204, 224, 114, 436, 301, 349, 428, 15, 136, 453, 185, 194, 14, 180, 49, 285, 420, 237, 82, 214, 341, 385, 77, 390, 231, 305, 63, 354, 158, 362, 175, 220, 93, 91, 24, 470, 389, 442, 334, 278, 386, 125, 447, 151, 345, 415, 257, 409, 70, 244, 441, 319, 181, 133, 342, 298, 98, 92, 112, 303, 46, 127, 382, 366, 168, 383, 52, 421, 126, 397, 418, 50, 76, 66, 179, 274, 376, 44, 281, 466, 248, 252, 277, 355, 331, 379, 189, 150, 102, 280, 37, 104, 128, 286, 291, 99, 306, 122, 438, 329, 462, 332, 153, 314, 71, 221, 240, 7, 186, 446, 367, 431, 378, 212, 159, 90, 78, 290, 469, 432, 264, 232, 363, 62, 375, 0, 174, 197, 106, 55, 410, 22, 81, 292, 451, 361, 235, 178, 429, 149, 61, 339, 245, 155, 287, 317, 320, 352, 94, 254, 256, 162, 399, 199, 275, 255, 333, 373, 273, 302, 195, 377, 170, 313, 387, 211, 27, 310, 300, 460, 60, 117, 423, 188, 138, 464, 157, 229, 135, 64, 234, 253, 21, 205, 201, 6, 13, 105, 452, 25, 160, 471, 270, 152, 141, 210, 400, 217, 208, 241, 455, 209, 109, 311, 116, 118, 318, 295, 54, 417, 148, 283, 394, 57, 340, 322, 351, 18, 326, 177, 74, 32, 41, 73, 380, 51, 239, 202, 119, 196, 461, 402, 401, 297, 289, 120, 47, 164, 226, 223, 393, 83, 191, 111, 19, 381, 467, 53, 38, 369, 465, 448, 143]
og index list energy: 94603550.43649924
index list: [247, 81, 251, 453, 41, 146, 288, 345, 84, 419, 123, 462, 96, 43, 451, 116, 50, 153, 16, 358, 111, 147, 344, 338, 427, 206, 293, 442, 86, 166, 408, 366, 200, 279, 467, 35, 355, 454, 121, 412, 3, 307, 143, 445, 193, 444, 275, 298, 431, 133, 131, 392, 136, 172, 230, 324, 425, 28, 67, 88, 267, 259, 433, 189, 386, 51, 398, 290, 82, 459, 117, 23, 356, 177, 72, 141, 458, 326, 414, 266, 391, 22, 157, 24, 308, 434, 26, 61, 97, 245, 183, 10, 79, 225, 418, 460, 372, 165, 450, 405, 215, 465, 152, 435, 437, 472, 306, 140, 282, 114, 1, 174, 85, 11, 468, 130, 321, 401, 337, 388, 139, 213, 145, 60, 203, 104, 148, 92, 129, 142, 159, 209, 471, 473, 272, 296, 341, 89, 315, 12, 273, 58, 323, 362, 216, 269, 36, 360, 39, 304, 311, 443, 2, 181, 207, 422, 426, 254, 182, 424, 346, 312, 29, 100, 384, 347, 415, 135, 463, 243, 235, 242, 368, 407, 204, 403, 439, 262, 105, 449, 68, 268, 188, 348, 395, 176, 151, 220, 455, 113, 258, 364, 236, 413, 34, 261, 158, 252, 192, 233, 284, 397, 103, 310, 137, 309, 69, 154, 270, 336, 351, 110, 357, 80, 9, 187, 87, 379, 229, 30, 64, 107, 224, 249, 318, 19, 389, 390, 15, 265, 332, 185, 373, 383, 180, 49, 410, 65, 353, 250, 31, 325, 385, 221, 428, 53, 33, 63, 354, 328, 370, 175, 334, 287, 8, 167, 470, 349, 134, 195, 278, 289, 292, 447, 76, 263, 128, 257, 409, 70, 17, 317, 319, 374, 416, 226, 367, 20, 168, 112, 303, 331, 127, 291, 45, 212, 73, 149, 421, 59, 406, 95, 440, 161, 66, 228, 160, 376, 44, 281, 40, 248, 219, 277, 156, 46, 438, 48, 150, 102, 77, 90, 404, 91, 286, 380, 99, 115, 122, 109, 264, 276, 93, 432, 314, 71, 214, 240, 7, 186, 446, 232, 222, 378, 55, 350, 377, 253, 456, 469, 179, 329, 299, 363, 13, 375, 0, 466, 197, 430, 184, 295, 382, 352, 335, 339, 361, 5, 178, 429, 52, 369, 196, 316, 155, 301, 441, 320, 27, 94, 411, 256, 162, 402, 400, 217, 285, 260, 205, 120, 302, 169, 190, 170, 313, 387, 211, 163, 231, 300, 106, 202, 271, 423, 56, 138, 464, 32, 37, 4, 125, 234, 305, 461, 194, 201, 42, 283, 171, 294, 25, 365, 342, 327, 144, 452, 210, 199, 333, 208, 420, 6, 198, 359, 246, 330, 118, 394, 255, 14, 417, 343, 62, 436, 57, 340, 322, 280, 18, 237, 101, 74, 218, 132, 54, 75, 78, 239, 241, 119, 108, 21, 238, 227, 297, 124, 83, 47, 164, 98, 223, 393, 173, 191, 396, 274, 381, 244, 126, 38, 457, 371, 448, 399]
index list energy: 37794562.99058308
Done


Wrote profile results to tpe_MMAl.py.lprof
Timer unit: 1e-06 s

Total time: 0.082324 s
File: /Users/sohamkale/Documents/Fawzi_Python/Fawzi_pycharm_project/tpe_EnergyFunctions.py
Function: CA_CA_prime_diff at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           @profile
    65                                           def CA_CA_prime_diff(i, peak_assignment_index, index_list, peak_list, Delta_List, append=False):
    66      5960       6004.0      1.0      7.3      try:
    67      5960       5735.0      1.0      7.0          peak = peak_list[peak_assignment_index]
    68      5960       6448.0      1.1      7.8          peak_next = peak_list[index_list[i + 1]]
    69
    70      5948      11101.0      1.9     13.5          CA_prime_shift = peak_next.get_data('CAPrimeShift')
    71      5948       8782.0      1.5     10.7          CA_prime_signal_noise = peak_next.get_data('HNCOCASignalNoise')
    72
    73      5948       9223.0      1.6     11.2          CA_shift = peak.get_data('CAShift')
    74      5948       8456.0      1.4     10.3          CA_signal_noise = peak.get_data('HNCASignalNoise')
    75
    76      5948       5502.0      0.9      6.7          if CA_prime_shift is None or CA_shift is None:
    77      3983       3228.0      0.8      3.9              return False
    78      1965       2586.0      1.3      3.1          elif abs(CA_shift - CA_prime_shift) < aa_p_d_delta and \
    79        41         43.0      1.0      0.1                  CA_prime_signal_noise >= 10 and CA_signal_noise >= 10:
    80        39         33.0      0.8      0.0              if should_append_DL or append:
    81        39         48.0      1.2      0.1                  Delta_List.append(('CACAPrime', 0.1, CA_shift - CA_prime_shift))
    82        39         27.0      0.7      0.0              return 0.1
    83
    84                                                   else:
    85      1926       4047.0      2.1      4.9              w1 = float((aa_p_d_sn_factor * ((CA_signal_noise * CA_prime_signal_noise) ** .5)) - aa_p_d_sub)
    86      1926       2868.0      1.5      3.5              result_new = w1 * aa_p_d * (CA_shift - CA_prime_shift)**2
    87      1926       1697.0      0.9      2.1              if should_append_DL or append:
    88      1926       4558.0      2.4      5.5                  Delta_List.append(('CACAPrime', result_new, CA_shift - CA_prime_shift))
    89      1926       1912.0      1.0      2.3              return result_new
    90        12         16.0      1.3      0.0      except IndexError:
    91        12         10.0      0.8      0.0          return False

Total time: 0.180968 s
File: /Users/sohamkale/Documents/Fawzi_Python/Fawzi_pycharm_project/tpe_EnergyFunctions.py
Function: BMRB_diff at line 127

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   127                                           @profile
   128                                           def BMRB_diff(i, peak_assignment_index, peak_list, residue_list, Delta_List, append=False, use_prime_data=False):
   129      5908       6461.0      1.1      3.6      if i == 0 and use_prime_data:
   130         4          2.0      0.5      0.0          return energy_if_false
   131      5904       7648.0      1.3      4.2      sub_energy = float()
   132      5904       5790.0      1.0      3.2      peak = peak_list[peak_assignment_index]
   133      5904       6620.0      1.1      3.7      residue = residue_list[i] if not use_prime_data else residue_list[i - 1]
   134
   135      5904      10546.0      1.8      5.8      CA_shift = peak.get_data('CAShift') if not use_prime_data else peak.get_data('CAPrimeShift')
   136      5904      11040.0      1.9      6.1      CA_BMRB = residue.get_data('CAExpected')
   137      5904       8845.0      1.5      4.9      CA_BMRB_SD = residue.get_data('CAExpectedSD')
   138
   139      5904       9322.0      1.6      5.2      CB_shift = peak.get_data('CBShift') if not use_prime_data else peak.get_data('CBPrimeShift')
   140      5904       9127.0      1.5      5.0      CB_BMRB = residue.get_data('CBExpected')
   141      5904       8766.0      1.5      4.8      CB_BMRB_SD = residue.get_data('CBExpectedSD')
   142
   143      5904       5894.0      1.0      3.3      if CA_shift is None and CB_shift is None:
   144      2278       2687.0      1.2      1.5          sub_energy += energy_if_false * 2
   145      2278       2092.0      0.9      1.2          ca_delta = 0
   146      2278       2173.0      1.0      1.2          cb_delta = 0
   147
   148      5904       5452.0      0.9      3.0      if CA_shift is None:
   149      2422       2647.0      1.1      1.5          sub_energy += energy_if_false
   150      2422       2360.0      1.0      1.3          ca_delta = 0
   151                                               else:
   152      3482       4325.0      1.2      2.4          ca_delta = abs(CA_shift - CA_BMRB)
   153
   154      5904       5620.0      1.0      3.1      if CB_shift is None:
   155      3514       3457.0      1.0      1.9          sub_energy += energy_if_false
   156      3514       3176.0      0.9      1.8          cb_delta = 0
   157                                               else:
   158      2390       2746.0      1.1      1.5          cb_delta = abs(CB_shift - CB_BMRB)
   159
   160      5904       6555.0      1.1      3.6      if ca_delta > CA_BMRB_SD and cb_delta > CB_BMRB_SD:
   161                                                   sub_energy = ((ca_delta - CA_BMRB_SD) * (ca_delta + CA_BMRB_SD) * \
   162      1811       2863.0      1.6      1.6                        (cb_delta - CB_BMRB_SD) * (cb_delta + CB_BMRB_SD)) * \
   163      1811       1905.0      1.1      1.1                       bmrb
   164
   165      4093       4444.0      1.1      2.5      elif ca_delta < CA_BMRB_SD and cb_delta > CB_BMRB_SD:
   166       564        898.0      1.6      0.5          sub_energy = ((cb_delta - CB_BMRB_SD) * (cb_delta + CB_BMRB_SD)) ** 2 * \
   167       564        581.0      1.0      0.3                       bmrb
   168      3529       3593.0      1.0      2.0      elif ca_delta > CA_BMRB_SD and cb_delta < CB_BMRB_SD:
   169       936       1487.0      1.6      0.8          sub_energy = ((ca_delta - CA_BMRB_SD) * (ca_delta + CA_BMRB_SD)) ** 2 * \
   170       936        977.0      1.0      0.5                       bmrb
   171      2593       2818.0      1.1      1.6      elif ca_delta < CA_BMRB_SD and cb_delta < CB_BMRB_SD:
   172      2421       2359.0      1.0      1.3          sub_energy = 0.1
   173
   174      5904       5653.0      1.0      3.1      if should_append_DL or append:
   175      5904       5550.0      0.9      3.1          if not use_prime_data:
   176      2960       4993.0      1.7      2.8              Delta_List.append(('CACBExp', sub_energy, ca_delta, cb_delta))
   177                                                   else:
   178      2944       4335.0      1.5      2.4              Delta_List.append(('CACBExpPrime', sub_energy, ca_delta, cb_delta))
   179
   180      5904       5161.0      0.9      2.9      return sub_energy

Total time: 3.54713 s
File: /Users/sohamkale/Documents/Fawzi_Python/Fawzi_pycharm_project/tpe_EnergyFunctions.py
Function: NOESY_H_dist at line 191

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   191                                           @profile
   192                                           def NOESY_H_dist(i, pai, index_list, peak_list, residue_list, Delta_List, append=False):
   193
   194     19574      23564.0      1.2      0.7      peak = peak_list[pai]
   195     19574      20770.0      1.1      0.6      residue = residue_list[i]
   196
   197     19574      38570.0      2.0      1.1      closeby_residue_list = residue.get_data('closebyAminoAcids')
   198     19574      31504.0      1.6      0.9      closeby_residue_list_dist = residue.get_data('closebyAminoAcidsDist')
   199
   200     19574      25651.0      1.3      0.7      if len(closeby_residue_list) == 0:
   201       162        156.0      1.0      0.0          return False
   202
   203     19412      35997.0      1.9      1.0      nearby_H_shift_list = peak.get_data('NearbyHShift')
   204     19412      33599.0      1.7      0.9      nearby_H_shift_list_signal_noise = peak.get_data('NOESYSignalNoise')
   205
   206     19412      22744.0      1.2      0.6      if len(nearby_H_shift_list) == 0:
   207      6472       6237.0      1.0      0.2          return False
   208
   209     12940      17455.0      1.3      0.5      weight = float()
   210     12940      15031.0      1.2      0.4      noesy_trosy_diff_list = []
   211     12940      13668.0      1.1      0.4      subweight_list =[]
   212
   213    132986     158080.0      1.2      4.5      for j, closeby in enumerate(closeby_residue_list):
   214    120046     126905.0      1.1      3.6          closeby_dist = closeby_residue_list_dist[j]
   215    120046     143394.0      1.2      4.0          closeby_assignment_peak = peak_list[index_list[closeby - 1]]
   216
   217    120046     227901.0      1.9      6.4          closeby_peak_H_shift = closeby_assignment_peak.get_data('TROSYHShift')
   218
   219    120046     122095.0      1.0      3.4          if closeby_peak_H_shift is None:
   220     36488      34992.0      1.0      1.0              continue
   221
   222                                                   '''
   223                                                   variables so far: residue, peak, closeby_residue_list(&dist) iter: , nearbyHShiftList (& SN)
   224                                                   closebyAAnumber (&index & dist), closebyPeak (&TROSY Hshift)
   225                                                   '''
   226
   227     83558      81184.0      1.0      2.3          NOESY_TROSY_H_diff = 5
   228     83558     104853.0      1.3      3.0          index = int()
   229    386208     459345.0      1.2     12.9          for k, nearby_H_shift in enumerate(nearby_H_shift_list):
   230    302650     384371.0      1.3     10.8              if abs(nearby_H_shift - closeby_peak_H_shift) < NOESY_TROSY_H_diff:
   231    156579     176735.0      1.1      5.0                  NOESY_TROSY_H_diff = abs(nearby_H_shift - closeby_peak_H_shift)
   232    156579     157248.0      1.0      4.4                  index = k
   233
   234     83558      93909.0      1.1      2.6          nearby_H_shift_signal_noise = nearby_H_shift_list_signal_noise[index]
   235
   236     83558     227827.0      2.7      6.4          dist_factor = dist_factor_forumla(closeby_dist)
   237     83558     152910.0      1.8      4.3          SN_factor = sn_factor_formula(nearby_H_shift_signal_noise)
   238     83558      91431.0      1.1      2.6          if NOESY_TROSY_H_diff < noesy_perfect_match_threshold:
   239      5056       6035.0      1.2      0.2              subWeight = npmt_penatly * dist_factor * SN_factor
   240     78502      83370.0      1.1      2.4          elif NOESY_TROSY_H_diff < noesy_semi_perfect_match_threshold:
   241      7282       8962.0      1.2      0.3              subWeight = nspmt_penalty * dist_factor * SN_factor
   242                                                   else:
   243     71220      84464.0      1.2      2.4              subWeight = n_no_match_penalty * dist_factor * SN_factor
   244
   245     83558     104115.0      1.2      2.9          noesy_trosy_diff_list.append(NOESY_TROSY_H_diff)
   246     83558      95492.0      1.1      2.7          subweight_list.append(subWeight)
   247     83558      89567.0      1.1      2.5          weight += subWeight
   248
   249     12940      14270.0      1.1      0.4      if should_append_DL or append:
   250     12940      20366.0      1.6      0.6          Delta_List.append(('NOESY', weight, subweight_list, noesy_trosy_diff_list))
   251     12940      12365.0      1.0      0.3      return weight

Total time: 7.48877 s
File: tpe_MMAl.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def main(iterations, temp, exponent, energy_if_false, peak_list, residue_list, create_chain = False):
    12         1        256.0    256.0      0.0      start_time = time.time()
    13         1         17.0     17.0      0.0      if dt.datetime.now() < date:
    14         1        104.0    104.0      0.0          print('iterations:', iterations, 'temp:', temp, 'exponent:', exponent, 'eif:', energy_if_false)
    15         1          3.0      3.0      0.0          if should_save_to_file:
    16         1         35.0     35.0      0.0              fh.write('iterations:{}, temp:{}, exponent:{}, eif:{}\n'.format(iterations, temp, exponent, energy_if_false))
    17
    18         1         29.0     29.0      0.0      index_list = list(range(len(peak_list)))
    19         1         11.0     11.0      0.0      assert len(index_list) == len(residue_list)
    20         1       1037.0   1037.0      0.0      random.shuffle(index_list, returns_number)
    21
    22         1          3.0      3.0      0.0      og_index_list = index_list
    23         1          3.0      3.0      0.0      count_temp = 0
    24         1          3.0      3.0      0.0      count = 0
    25
    26                                               # iterations
    27       501       1329.0      2.7      0.0      for i in range(iterations):
    28       500       1233.0      2.5      0.0          count += 1
    29       500       1209.0      2.4      0.0          count_temp += 1
    30       500       8577.0     17.2      0.1          a = random.randint(0, len(index_list) - 1)
    31       500       3424.0      6.8      0.0          new_index_list = index_list[:]
    32       500       1127.0      2.3      0.0          should_swap_eval = True
    33
    34       500       1084.0      2.2      0.0          if create_chain:
    35       500      55244.0    110.5      0.7              r, f = chain_creator(index_list, peak_list, a)
    36
    37                                                       if True:
    38       500       3341.0      6.7      0.0                  a_list = [x for x in range(a + r, a + f + 1)]
    39       500       1195.0      2.4      0.0                  while True:
    40       503       5957.0     11.8      0.1                      b = random.randint(-1 * r, len(index_list) - 1 - f)
    41       503       2306.0      4.6      0.0                      b_list = [x for x in range(b + r, b + f + 1)]
    42       503       2371.0      4.7      0.0                      if set(a_list).isdisjoint(b_list):
    43       500       1086.0      2.2      0.0                          break
    44                                                           new_index_list[a + r: a + f + 1], new_index_list[b + r: b + f + 1], = \
    45       500       2578.0      5.2      0.0                      new_index_list[b + r: b + f + 1], new_index_list[a + r: a + f + 1]
    46                                                       # set
    47                                                       if True:
    48       500      12429.0     24.9      0.2                  if len(set(new_index_list)) != len(new_index_list):
    49                                                               print('ERROR!!')
    50                                                               print('a list: {} \n b list: {} \n r: {} \n f: {} \n index list {} \n new index list {}'.format(
    51                                                                   a_list, b_list, r, f, index_list, new_index_list))
    52                                                               should_swap_eval = False
    53
    54                                                       # list
    55                                                       if True:
    56       500       1412.0      2.8      0.0                  a_temporary = a_list[:-1]
    57       500       1262.0      2.5      0.0                  b_temporary = b_list[:-1]
    58       500       1536.0      3.1      0.0                  if not set(a_temporary).isdisjoint(b_temporary):
    59                                                               print('ERROR!!')
    60                                                               print('a list: {} \n b list: {} \n r: {} \n f: {} \n index list {} \n new index list {}'.format(
    61                                                                   a_list, b_list, r, f, index_list, new_index_list))
    62                                                               should_swap_eval = False
    63
    64                                                   else:
    65                                                       b = random.randint(0, len(index_list) - 1)
    66                                                       new_index_list[a], new_index_list[b] = new_index_list[b], new_index_list[a]
    67                                                       a_list = [a]; b_list = [b]
    68
    69       500       1165.0      2.3      0.0          if should_swap_eval:
    70       500    6891230.0  13782.5     92.0              if swap_evaluator(a_list, b_list, index_list, new_index_list, temp, peak_list, residue_list, energy_if_false, Delta_List):
    71       255        598.0      2.3      0.0                  index_list = new_index_list
    72
    73       500       1302.0      2.6      0.0              if temp == 0: continue
    74       500       3792.0      7.6      0.1              elif count_temp == int(iterations*((math.log(1/temp, exponent))**-1)):
    75        25         53.0      2.1      0.0                  count_temp = 0
    76        25         59.0      2.4      0.0                  temp = temp * exponent
    77
    78       500       5771.0     11.5      0.1              if dt.datetime.now() > date: break
    79
    80                                               # Data for runtime
    81                                               if True:
    82         1          4.0      4.0      0.0          end_time = time.time()
    83         1         47.0     47.0      0.0          print('time taken (sec): {}'.format(end_time - start_time))
    84         1         13.0     13.0      0.0          if should_save_to_file: fh.write('time taken (sec): {}\n'.format(end_time - start_time))
    85
    86         1         13.0     13.0      0.0          print('number of iterations: {}'.format(count))
    87         1          6.0      6.0      0.0          if should_save_to_file: fh.write('number of iterations: {}\n'.format(count))
    88
    89         1        287.0    287.0      0.0          print('og index list:', [x for x in og_index_list])
    90         1        187.0    187.0      0.0          if should_save_to_file: fh.write('og index list: {}\n'.format([x for x in og_index_list]))
    91
    92         1     218173.0 218173.0      2.9          og_energy = eval_energy(og_index_list, peak_list, residue_list, energy_if_false)[0]
    93         1         45.0     45.0      0.0          print('og index list energy:', og_energy)
    94         1         24.0     24.0      0.0          if should_save_to_file: fh.write('og index list energy: {}\n'.format(og_energy))
    95
    96         1        355.0    355.0      0.0          print('index list:', [x for x in index_list])
    97         1        224.0    224.0      0.0          if should_save_to_file: fh.write('index list: {}\n'.format([x for x in index_list]))
    98
    99         1     255156.0 255156.0      3.4          energy = eval_energy(index_list, peak_list, residue_list, energy_if_false)[0]
   100         1          3.0      3.0      0.0          energy_list.append(energy)
   101         1         44.0     44.0      0.0          print('index list energy:', energy)
   102         1         18.0     18.0      0.0          if should_save_to_file: fh.write('index list energy: {}'.format(energy))
   103
   104                                               # RETURNS HERE
   105         1          3.0      3.0      0.0      return og_index_list, og_energy, index_list, energy

Total time: 6.88268 s
File: tpe_MMAl.py
Function: swap_evaluator at line 107

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   107                                           @profile
   108                                           def swap_evaluator(a_list, b_list, index_list, new_index_list, temp, peak_list, residue_list, energy_if_false, Delta_List):
   109                                               global delta
   110       500    6876347.0  13752.7     99.9      delta = main_energy_function(a_list, b_list, index_list, new_index_list, peak_list, residue_list, energy_if_false, Delta_List)
   111       500        529.0      1.1      0.0      if should_append_DL:
   112       500       2827.0      5.7      0.0          Delta_List.append([delta, a_list, b_list, [index_list[x] for x in a_list], [index_list[x] for x in b_list], index_list, new_index_list])
   113
   114       500        526.0      1.1      0.0      if delta <= 0:
   115       205        154.0      0.8      0.0          return True
   116       295        266.0      0.9      0.0      elif temp == 0:
   117                                                   return False
   118       295        242.0      0.8      0.0      elif delta > 0:
   119       295        912.0      3.1      0.0          p = math.exp(-delta/temp)
   120       295        613.0      2.1      0.0          if random.random() <= p:
   121        50         36.0      0.7      0.0              return True
   122                                                   else:
   123       245        225.0      0.9      0.0              return False

Total time: 0.043808 s
File: tpe_MMAl.py
Function: chain_creator at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                           @profile
   126                                           def  chain_creator(index_list, peak_list, a):
   127                                               # 120 is probably a good cutoff
   128                                               # forwards
   129       500        501.0      1.0      1.1      f = 0
   130       500        423.0      0.8      1.0      r = 0
   131                                               if True:
   132       500        363.0      0.7      0.8          while True:
   133       501        450.0      0.9      1.0              i = a + f
   134       501        633.0      1.3      1.4              if i > len(index_list):
   135                                                           break
   136       501      15184.0     30.3     34.7              ca_ca_prime_diff = CA_CA_prime_diff(i, index_list[i], index_list, peak_list, [])
   137       501       4397.0      8.8     10.0              cb_cb_prime_diff = CB_CB_prime_diff(i, index_list[i], index_list, peak_list, [])
   138       501        465.0      0.9      1.1              if ca_ca_prime_diff and cb_cb_prime_diff and ca_ca_prime_diff < 900 and cb_cb_prime_diff < 900:
   139         5         10.0      2.0      0.0                  p = ((1 + math.exp(.01 * (ca_ca_prime_diff - 500))) ** -1) * \
   140         5          7.0      1.4      0.0                      ((1 + math.exp(.04 * (cb_cb_prime_diff - 400))) ** -1)
   141         5          7.0      1.4      0.0                  if random.random() < p:
   142         1          1.0      1.0      0.0                      f += 1
   143                                                           else:
   144         4          3.0      0.8      0.0                      break
   145                                                       else:
   146       496        408.0      0.8      0.9                  break
   147
   148       500        371.0      0.7      0.8          while True:
   149       502        493.0      1.0      1.1              i = a + r - 1
   150       502        427.0      0.9      1.0              if i < 0:
   151         1          1.0      1.0      0.0                  break
   152       501      13549.0     27.0     30.9              ca_ca_prime_diff = CA_CA_prime_diff(i, index_list[i], index_list, peak_list, [])
   153       501       4260.0      8.5      9.7              cb_cb_prime_diff = CB_CB_prime_diff(i, index_list[i], index_list, peak_list, [])
   154       501        450.0      0.9      1.0              if ca_ca_prime_diff and cb_cb_prime_diff and ca_ca_prime_diff < 900 and cb_cb_prime_diff < 900:
   155         5         11.0      2.2      0.0                  p = ((1 + math.exp(.01 * (ca_ca_prime_diff - 500))) ** -1) * \
   156         5          6.0      1.2      0.0                      ((1 + math.exp(.04 * (cb_cb_prime_diff - 400))) ** -1)
   157         5          6.0      1.2      0.0                  if random.random() < p:
   158         2          3.0      1.5      0.0                      r -= 1
   159                                                           else:
   160         3          3.0      1.0      0.0                      break
   161                                                       else:
   162       496        400.0      0.8      0.9                  break
   163
   164       500        550.0      1.1      1.3      assert r <= 0; assert f >= 0
   165       500        426.0      0.9      1.0      return r, f

sohams-air:Fawzi_pycharm_project sohamkale$